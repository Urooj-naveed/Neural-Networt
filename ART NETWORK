{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMteEGtE/8FzzApSXrimcK6",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Urooj-naveed/Neural-Networt/blob/main/ART%20NETWORK\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import time\n",
        "\n",
        "\n",
        "A = np.array([0,0,1,1,1,0,0,0,\n",
        "              0,1,0,0,0,1,0,0,\n",
        "              1,0,0,0,0,0,1,0,\n",
        "              1,1,1,1,1,1,1,0,\n",
        "              1,0,0,0,0,0,1,0,\n",
        "              1,0,0,0,0,0,1,0,\n",
        "              1,0,0,0,0,0,1,0,\n",
        "              0,0,0,0,0,0,0,0]).reshape(8,8)\n",
        "\n",
        "B = np.array([1,1,1,1,1,0,0,0,\n",
        "              1,0,0,0,0,1,0,0,\n",
        "              1,0,0,0,0,1,0,0,\n",
        "              1,1,1,1,1,0,0,0,\n",
        "              1,0,0,0,0,1,0,0,\n",
        "              1,0,0,0,0,1,0,0,\n",
        "              1,0,0,0,0,1,0,0,\n",
        "              1,1,1,1,1,0,0,0]).reshape(8,8)\n",
        "\n",
        "C = np.array([0,1,1,1,1,1,0,0,\n",
        "              1,0,0,0,0,0,1,0,\n",
        "              1,0,0,0,0,0,0,0,\n",
        "              1,0,0,0,0,0,0,0,\n",
        "              1,0,0,0,0,0,0,0,\n",
        "              1,0,0,0,0,0,1,0,\n",
        "              0,1,0,0,0,0,1,0,\n",
        "              0,0,1,1,1,1,0,0]).reshape(8,8)\n",
        "\n",
        "D = np.array([1,1,1,1,0,0,0,0,\n",
        "            1,0,0,0,1,0,0,0,\n",
        "            1,0,0,0,0,1,0,0,\n",
        "            1,0,0,0,0,1,0,0,\n",
        "            1,0,0,0,0,1,0,0,\n",
        "            1,0,0,0,0,1,0,0,\n",
        "            1,0,0,0,1,0,0,0,\n",
        "            1,1,1,1,0,0,0,0]).reshape(8,8)\n",
        "\n",
        "E = np.array([1,1,1,1,1,1,0,0,\n",
        "            1,0,0,0,0,0,0,0,\n",
        "            1,0,0,0,0,0,0,0,\n",
        "            1,1,1,1,1,1,0,0,\n",
        "            1,0,0,0,0,0,0,0,\n",
        "            1,0,0,0,0,0,0,0,\n",
        "            1,0,0,0,0,0,0,0,\n",
        "            1,1,1,1,1,1,0,0]).reshape(8,8)\n",
        "\n",
        "F = np.array([1,1,1,1,1,1,0,0,\n",
        "                1,0,0,0,0,0,0,0,\n",
        "                1,0,0,0,0,0,0,0,\n",
        "                1,1,1,1,1,1,0,0,\n",
        "                1,0,0,0,0,0,0,0,\n",
        "                1,0,0,0,0,0,0,0,\n",
        "                1,0,0,0,0,0,0,0,\n",
        "                0,0,0,0,0,0,0,0]).reshape(8,8)\n",
        "\n",
        "G = np.array([0,1,1,1,1,1,0,0,\n",
        "                1,0,0,0,0,0,0,0,\n",
        "                1,0,0,0,0,0,0,0,\n",
        "                1,0,0,0,1,1,1,0,\n",
        "                1,0,0,0,0,0,1,0,\n",
        "                1,0,0,0,0,0,1,0,\n",
        "                1,0,0,0,0,0,1,0,\n",
        "                0,1,1,1,1,1,0,0]).reshape(8,8)\n",
        "\n",
        "H = np.array([1,0,0,0,0,0,1,0,\n",
        "                1,0,0,0,0,0,1,0,\n",
        "                1,0,0,0,0,0,1,0,\n",
        "                1,1,1,1,1,1,1,0,\n",
        "                1,0,0,0,0,0,1,0,\n",
        "                1,0,0,0,0,0,1,0,\n",
        "                1,0,0,0,0,0,1,0,\n",
        "                1,0,0,0,0,0,1,0]).reshape(8,8)\n",
        "\n",
        "I = np.array([0,0,1,1,1,0,0,0,\n",
        "                   0,0,0,1,0,0,0,0,\n",
        "                   0,0,0,1,0,0,0,0,\n",
        "                   0,0,0,1,0,0,0,0,\n",
        "                   0,0,0,1,0,0,0,0,\n",
        "                   0,0,0,1,0,0,0,0,\n",
        "                   0,0,0,1,0,0,0,0,\n",
        "                   0,0,1,1,1,0,0,0]).reshape(8,8)\n",
        "\n",
        "J = np.array([0,1,1,1,1,1,0,0,\n",
        "                    0,0,0,0,1,0,0,0,\n",
        "                    0,0,0,0,1,0,0,0,\n",
        "                    0,0,0,0,1,0,0,0,\n",
        "                    0,0,0,0,1,0,0,0,\n",
        "                    1,0,0,0,1,0,0,0,\n",
        "                    1,0,0,0,1,0,0,0,\n",
        "                    0,1,1,1,0,0,0,0]).reshape(8,8)\n",
        "\n",
        "K = np.array([1,0,0,0,1,0,0,0,\n",
        "                    1,0,0,1,0,0,0,0,\n",
        "                    1,0,1,0,0,0,0,0,\n",
        "                    1,1,0,0,0,0,0,0,\n",
        "                    1,0,1,0,0,0,0,0,\n",
        "                    1,0,0,1,0,0,0,0,\n",
        "                    1,0,0,0,1,0,0,0,\n",
        "                    0,0,0,0,0,0,0,0]).reshape(8,8)\n",
        "\n",
        "L = np.array([1,0,0,0,0,0,0,0,\n",
        "              1,0,0,0,0,0,0,0,\n",
        "              1,0,0,0,0,0,0,0,\n",
        "              1,0,0,0,0,0,0,0,\n",
        "              1,0,0,0,0,0,0,0,\n",
        "              1,0,0,0,0,0,0,0,\n",
        "              1,1,1,1,1,1,1,1,\n",
        "              0,0,0,0,0,0,0,0]).reshape(8,8)\n",
        "\n",
        "M = np.array([1,0,0,0,0,0,0,1,\n",
        "              1,1,0,0,0,0,1,1,\n",
        "              1,0,1,0,0,1,0,1,\n",
        "              1,0,0,1,1,0,0,1,\n",
        "              1,0,0,0,0,0,0,1,\n",
        "              1,0,0,0,0,0,0,1,\n",
        "              1,0,0,0,0,0,0,1,\n",
        "              1,0,0,0,0,0,0,1]).reshape(8,8)\n",
        "\n",
        "N = np.array([1,0,0,0,0,0,0,1,\n",
        "              1,1,0,0,0,0,0,1,\n",
        "              1,0,1,0,0,0,0,1,\n",
        "              1,0,0,1,0,0,0,1,\n",
        "              1,0,0,0,1,0,0,1,\n",
        "              1,0,0,0,0,1,0,1,\n",
        "              1,0,0,0,0,0,1,1,\n",
        "              1,0,0,0,0,0,0,1]).reshape(8,8)\n",
        "\n",
        "O = np.array([0,0,1,1,1,0,0,0,\n",
        "              0,1,0,0,0,1,0,0,\n",
        "              1,0,0,0,0,0,1,0,\n",
        "              1,0,0,0,0,0,1,0,\n",
        "              1,0,0,0,0,0,1,0,\n",
        "              1,0,0,0,0,0,1,0,\n",
        "              0,1,0,0,0,1,0,0,\n",
        "              0,0,1,1,1,0,0,0]).reshape(8,8)\n",
        "\n",
        "P = np.array([1,1,1,1,1,1,0,0,\n",
        "                1,0,0,0,0,1,0,0,\n",
        "                1,0,0,0,0,1,0,0,\n",
        "                1,1,1,1,1,1,0,0,\n",
        "                1,0,0,0,0,0,0,0,\n",
        "                1,0,0,0,0,0,0,0,\n",
        "                1,0,0,0,0,0,0,0,\n",
        "                0,0,0,0,0,0,0,0]).reshape(8,8)\n",
        "\n",
        "Q = np.array([1,1,1,1,1,1,0,0,\n",
        "                1,0,0,0,0,1,0,0,\n",
        "                1,0,0,0,0,1,0,0,\n",
        "                1,0,0,1,0,1,0,0,\n",
        "                1,0,0,0,1,1,0,0,\n",
        "                1,1,1,1,1,1,0,0,\n",
        "                0,0,0,0,0,0,1,0,\n",
        "                0,0,0,0,0,0,0,0]).reshape(8,8)\n",
        "\n",
        "R = np.array([1,1,1,1,1,0,0,0,\n",
        "                1,0,0,0,1,0,0,0,\n",
        "                1,0,0,0,1,0,0,0,\n",
        "                1,1,1,1,1,0,0,0,\n",
        "                1,0,0,1,0,0,0,0,\n",
        "                1,0,0,0,1,0,0,0,\n",
        "                1,0,0,0,0,1,0,0,\n",
        "                0,0,0,0,0,0,1,0]).reshape(8,8)\n",
        "\n",
        "S = np.array([0,1,1,1,1,1,0,0,\n",
        "                1,0,0,0,0,0,0,0,\n",
        "                1,0,0,0,0,0,0,0,\n",
        "                0,1,1,1,1,1,0,0,\n",
        "                0,0,0,0,0,1,0,0,\n",
        "                0,0,0,0,0,1,0,0,\n",
        "                1,0,0,0,0,1,0,0,\n",
        "                0,1,1,1,1,0,0,0]).reshape(8,8)\n",
        "\n",
        "T= np.array([1,1,1,1,1,1,1,1,\n",
        "               1,1,1,1,1,1,1,1,\n",
        "               0,0,0,1,1,0,0,0,\n",
        "               0,0,0,1,1,0,0,0,\n",
        "               0,0,0,1,1,0,0,0,\n",
        "               0,0,0,1,1,0,0,0,\n",
        "               0,0,0,1,1,0,0,0,\n",
        "               0,0,0,1,1,0,0,0]).reshape(8,8)\n",
        "\n",
        "train = np.array([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T]).reshape(20,64)\n",
        "\n",
        "print(train.shape)\n",
        "\n",
        "fig, axs = plt.subplots(5, 4, figsize=(10, 12))\n",
        "\n",
        "for i, alphabet in enumerate([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T]):\n",
        "    row = i // 4\n",
        "    col = i % 4\n",
        "    axs[row, col].imshow(alphabet, cmap='gray')\n",
        "    axs[row, col].set_title(chr(ord('A') + i))\n",
        "\n",
        "plt.show()\n",
        "\n",
        "class ART1:\n",
        "    def __init__(self, learning_coef=1, vigilance=0.95):\n",
        "        self.learning_coef = learning_coef\n",
        "        self.vigilance = vigilance\n",
        "        self.L1_neurons_cnt = None\n",
        "        self.L2_neurons_cnt = None\n",
        "        self.bottomUps = None\n",
        "        self.topDowns = None\n",
        "        self.class_labels = {}\n",
        "\n",
        "    def fit(self, train, noise_level=0.25):\n",
        "        self.L1_neurons_cnt = len(train[0])\n",
        "        self.L2_neurons_cnt = 1\n",
        "        self.bottomUps = np.array([[1/(self.L1_neurons_cnt + 1) for _ in range(self.L1_neurons_cnt)]], np.float)\n",
        "        self.topDowns = np.array([[1 for _ in range(self.L1_neurons_cnt)]], np.float)\n",
        "\n",
        "        for idx, tv in enumerate(train):\n",
        "            # Add random noise to the input vector\n",
        "            noise = np.random.normal(scale=noise_level, size=self.L1_neurons_cnt)\n",
        "            tv = np.clip(tv + noise, 0, 1)  # Clip values to range [0, 1]\n",
        "            \n",
        "            createNewNeuron = True\n",
        "            outputs = [self.bottomUps[i].dot(tv) for i in range(self.L2_neurons_cnt)]\n",
        "            counter = self.L2_neurons_cnt\n",
        "\n",
        "            while counter > 0:\n",
        "                winning_output = max(outputs)\n",
        "                winner_neuron_idx = outputs.index(winning_output)\n",
        "                tv_sum = sum(tv)\n",
        "\n",
        "                if tv_sum == 0:\n",
        "                    similarity = 0\n",
        "                else:\n",
        "                    similarity = self.topDowns[winner_neuron_idx].dot(tv)/(sum(tv))\n",
        "\n",
        "                if similarity >= self.vigilance:\n",
        "                    createNewNeuron = False\n",
        "                    new_bottom_weights = tv * self.topDowns[winner_neuron_idx]/(self.learning_coef+tv.dot(self.topDowns[winner_neuron_idx]))\n",
        "                    new_top_weights = tv * self.topDowns[winner_neuron_idx]\n",
        "                    self.topDowns[winner_neuron_idx] = new_top_weights\n",
        "                    self.bottomUps[winner_neuron_idx] = new_bottom_weights\n",
        "                    if winner_neuron_idx in self.class_labels:\n",
        "                        self.class_labels[winner_neuron_idx].append(idx)\n",
        "                    else:\n",
        "                        self.class_labels[winner_neuron_idx] = [idx]\n",
        "                    break\n",
        "                else:\n",
        "                    outputs[winner_neuron_idx] = -1\n",
        "                    counter -= 1\n",
        "\n",
        "            if createNewNeuron:\n",
        "                new_bottom_weights = np.array([[i/(self.learning_coef + sum(tv)) for i in tv]], np.float)\n",
        "                new_top_weights = np.array([[i for i in tv]], np.float)\n",
        "                self.bottomUps = np.append(self.bottomUps, new_bottom_weights, axis=0)\n",
        "                self.topDowns = np.append(self.topDowns, new_top_weights, axis=0)\n",
        "                self.L2_neurons_cnt += 1\n",
        "                self.class_labels[self.L2_neurons_cnt-1] = [idx]\n",
        "\n",
        "        print(f\"Total Classes: {self.L2_neurons_cnt}\")\n",
        "        print(\"Class labels:\")\n",
        "        for class_idx, class_items in self.class_labels.items():\n",
        "            print(f\"Class {class_idx}: {[chr(ord('A')+item) for item in class_items]}\")\n",
        "            \n",
        "model = ART1(learning_coef=0.01, vigilance=0.95)\n",
        "\n",
        "start_time = time.time()\n",
        "model.fit(train)\n",
        "end_time = time.time()\n",
        "print(\"Training time\", end_time - start_time)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "lQP-CgiFPE3t",
        "outputId": "d1f2dd9a-1fd2-4e60-8c0e-14226f28895d"
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(20, 64)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 720x864 with 20 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Total Classes: 20\n",
            "Class labels:\n",
            "Class 0: ['A']\n",
            "Class 1: ['B']\n",
            "Class 2: ['C']\n",
            "Class 3: ['D']\n",
            "Class 4: ['E']\n",
            "Class 5: ['F']\n",
            "Class 6: ['G']\n",
            "Class 7: ['H']\n",
            "Class 8: ['I']\n",
            "Class 9: ['J']\n",
            "Class 10: ['K']\n",
            "Class 11: ['L']\n",
            "Class 12: ['M']\n",
            "Class 13: ['N']\n",
            "Class 14: ['O']\n",
            "Class 15: ['P']\n",
            "Class 16: ['Q']\n",
            "Class 17: ['R']\n",
            "Class 18: ['S']\n",
            "Class 19: ['T']\n",
            "Training time 0.02371525764465332\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-24-88da9f36f51e>:213: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
            "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
            "  self.bottomUps = np.array([[1/(self.L1_neurons_cnt + 1) for _ in range(self.L1_neurons_cnt)]], np.float)\n",
            "<ipython-input-24-88da9f36f51e>:214: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
            "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
            "  self.topDowns = np.array([[1 for _ in range(self.L1_neurons_cnt)]], np.float)\n",
            "<ipython-input-24-88da9f36f51e>:251: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
            "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
            "  new_bottom_weights = np.array([[i/(self.learning_coef + sum(tv)) for i in tv]], np.float)\n",
            "<ipython-input-24-88da9f36f51e>:252: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
            "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
            "  new_top_weights = np.array([[i for i in tv]], np.float)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import time\n",
        "from sklearn.metrics import confusion_matrix\n",
        "\n",
        "A = np.array([0,0,1,1,1,0,0,0,\n",
        "              0,1,0,0,0,1,0,0,\n",
        "              1,0,0,0,0,0,1,0,\n",
        "              1,1,1,1,1,1,1,0,\n",
        "              1,0,0,0,0,0,1,0,\n",
        "              1,0,0,0,0,0,1,0,\n",
        "              1,0,0,0,0,0,1,0,\n",
        "              0,0,0,0,0,0,0,0]).reshape(8,8)\n",
        "\n",
        "B = np.array([1,1,1,1,1,0,0,0,\n",
        "              1,0,0,0,0,1,0,0,\n",
        "              1,0,0,0,0,1,0,0,\n",
        "              1,1,1,1,1,0,0,0,\n",
        "              1,0,0,0,0,1,0,0,\n",
        "              1,0,0,0,0,1,0,0,\n",
        "              1,0,0,0,0,1,0,0,\n",
        "              1,1,1,1,1,0,0,0]).reshape(8,8)\n",
        "\n",
        "C = np.array([0,1,1,1,1,1,0,0,\n",
        "              1,0,0,0,0,0,1,0,\n",
        "              1,0,0,0,0,0,0,0,\n",
        "              1,0,0,0,0,0,0,0,\n",
        "              1,0,0,0,0,0,0,0,\n",
        "              1,0,0,0,0,0,1,0,\n",
        "              0,1,0,0,0,0,1,0,\n",
        "              0,0,1,1,1,1,0,0]).reshape(8,8)\n",
        "\n",
        "D = np.array([1,1,1,1,0,0,0,0,\n",
        "            1,0,0,0,1,0,0,0,\n",
        "            1,0,0,0,0,1,0,0,\n",
        "            1,0,0,0,0,1,0,0,\n",
        "            1,0,0,0,0,1,0,0,\n",
        "            1,0,0,0,0,1,0,0,\n",
        "            1,0,0,0,1,0,0,0,\n",
        "            1,1,1,1,0,0,0,0]).reshape(8,8)\n",
        "\n",
        "E = np.array([1,1,1,1,1,1,0,0,\n",
        "            1,0,0,0,0,0,0,0,\n",
        "            1,0,0,0,0,0,0,0,\n",
        "            1,1,1,1,1,1,0,0,\n",
        "            1,0,0,0,0,0,0,0,\n",
        "            1,0,0,0,0,0,0,0,\n",
        "            1,0,0,0,0,0,0,0,\n",
        "            1,1,1,1,1,1,0,0]).reshape(8,8)\n",
        "\n",
        "F = np.array([1,1,1,1,1,1,0,0,\n",
        "                1,0,0,0,0,0,0,0,\n",
        "                1,0,0,0,0,0,0,0,\n",
        "                1,1,1,1,1,1,0,0,\n",
        "                1,0,0,0,0,0,0,0,\n",
        "                1,0,0,0,0,0,0,0,\n",
        "                1,0,0,0,0,0,0,0,\n",
        "                0,0,0,0,0,0,0,0]).reshape(8,8)\n",
        "\n",
        "G = np.array([0,1,1,1,1,1,0,0,\n",
        "                1,0,0,0,0,0,0,0,\n",
        "                1,0,0,0,0,0,0,0,\n",
        "                1,0,0,0,1,1,1,0,\n",
        "                1,0,0,0,0,0,1,0,\n",
        "                1,0,0,0,0,0,1,0,\n",
        "                1,0,0,0,0,0,1,0,\n",
        "                0,1,1,1,1,1,0,0]).reshape(8,8)\n",
        "\n",
        "H = np.array([1,0,0,0,0,0,1,0,\n",
        "                1,0,0,0,0,0,1,0,\n",
        "                1,0,0,0,0,0,1,0,\n",
        "                1,1,1,1,1,1,1,0,\n",
        "                1,0,0,0,0,0,1,0,\n",
        "                1,0,0,0,0,0,1,0,\n",
        "                1,0,0,0,0,0,1,0,\n",
        "                1,0,0,0,0,0,1,0]).reshape(8,8)\n",
        "\n",
        "I = np.array([0,0,1,1,1,0,0,0,\n",
        "                   0,0,0,1,0,0,0,0,\n",
        "                   0,0,0,1,0,0,0,0,\n",
        "                   0,0,0,1,0,0,0,0,\n",
        "                   0,0,0,1,0,0,0,0,\n",
        "                   0,0,0,1,0,0,0,0,\n",
        "                   0,0,0,1,0,0,0,0,\n",
        "                   0,0,1,1,1,0,0,0]).reshape(8,8)\n",
        "\n",
        "J = np.array([0,1,1,1,1,1,0,0,\n",
        "                    0,0,0,0,1,0,0,0,\n",
        "                    0,0,0,0,1,0,0,0,\n",
        "                    0,0,0,0,1,0,0,0,\n",
        "                    0,0,0,0,1,0,0,0,\n",
        "                    1,0,0,0,1,0,0,0,\n",
        "                    1,0,0,0,1,0,0,0,\n",
        "                    0,1,1,1,0,0,0,0]).reshape(8,8)\n",
        "\n",
        "K = np.array([1,0,0,0,1,0,0,0,\n",
        "                    1,0,0,1,0,0,0,0,\n",
        "                    1,0,1,0,0,0,0,0,\n",
        "                    1,1,0,0,0,0,0,0,\n",
        "                    1,0,1,0,0,0,0,0,\n",
        "                    1,0,0,1,0,0,0,0,\n",
        "                    1,0,0,0,1,0,0,0,\n",
        "                    0,0,0,0,0,0,0,0]).reshape(8,8)\n",
        "\n",
        "L = np.array([1,0,0,0,0,0,0,0,\n",
        "              1,0,0,0,0,0,0,0,\n",
        "              1,0,0,0,0,0,0,0,\n",
        "              1,0,0,0,0,0,0,0,\n",
        "              1,0,0,0,0,0,0,0,\n",
        "              1,0,0,0,0,0,0,0,\n",
        "              1,1,1,1,1,1,1,1,\n",
        "              0,0,0,0,0,0,0,0]).reshape(8,8)\n",
        "\n",
        "M = np.array([1,0,0,0,0,0,0,1,\n",
        "              1,1,0,0,0,0,1,1,\n",
        "              1,0,1,0,0,1,0,1,\n",
        "              1,0,0,1,1,0,0,1,\n",
        "              1,0,0,0,0,0,0,1,\n",
        "              1,0,0,0,0,0,0,1,\n",
        "              1,0,0,0,0,0,0,1,\n",
        "              1,0,0,0,0,0,0,1]).reshape(8,8)\n",
        "\n",
        "N = np.array([1,0,0,0,0,0,0,1,\n",
        "              1,1,0,0,0,0,0,1,\n",
        "              1,0,1,0,0,0,0,1,\n",
        "              1,0,0,1,0,0,0,1,\n",
        "              1,0,0,0,1,0,0,1,\n",
        "              1,0,0,0,0,1,0,1,\n",
        "              1,0,0,0,0,0,1,1,\n",
        "              1,0,0,0,0,0,0,1]).reshape(8,8)\n",
        "\n",
        "O = np.array([0,0,1,1,1,0,0,0,\n",
        "              0,1,0,0,0,1,0,0,\n",
        "              1,0,0,0,0,0,1,0,\n",
        "              1,0,0,0,0,0,1,0,\n",
        "              1,0,0,0,0,0,1,0,\n",
        "              1,0,0,0,0,0,1,0,\n",
        "              0,1,0,0,0,1,0,0,\n",
        "              0,0,1,1,1,0,0,0]).reshape(8,8)\n",
        "\n",
        "P = np.array([1,1,1,1,1,1,0,0,\n",
        "                1,0,0,0,0,1,0,0,\n",
        "                1,0,0,0,0,1,0,0,\n",
        "                1,1,1,1,1,1,0,0,\n",
        "                1,0,0,0,0,0,0,0,\n",
        "                1,0,0,0,0,0,0,0,\n",
        "                1,0,0,0,0,0,0,0,\n",
        "                0,0,0,0,0,0,0,0]).reshape(8,8)\n",
        "\n",
        "Q = np.array([1,1,1,1,1,1,0,0,\n",
        "                1,0,0,0,0,1,0,0,\n",
        "                1,0,0,0,0,1,0,0,\n",
        "                1,0,0,1,0,1,0,0,\n",
        "                1,0,0,0,1,1,0,0,\n",
        "                1,1,1,1,1,1,0,0,\n",
        "                0,0,0,0,0,0,1,0,\n",
        "                0,0,0,0,0,0,0,0]).reshape(8,8)\n",
        "\n",
        "R = np.array([1,1,1,1,1,0,0,0,\n",
        "                1,0,0,0,1,0,0,0,\n",
        "                1,0,0,0,1,0,0,0,\n",
        "                1,1,1,1,1,0,0,0,\n",
        "                1,0,0,1,0,0,0,0,\n",
        "                1,0,0,0,1,0,0,0,\n",
        "                1,0,0,0,0,1,0,0,\n",
        "                0,0,0,0,0,0,1,0]).reshape(8,8)\n",
        "\n",
        "S = np.array([0,1,1,1,1,1,0,0,\n",
        "                1,0,0,0,0,0,0,0,\n",
        "                1,0,0,0,0,0,0,0,\n",
        "                0,1,1,1,1,1,0,0,\n",
        "                0,0,0,0,0,1,0,0,\n",
        "                0,0,0,0,0,1,0,0,\n",
        "                1,0,0,0,0,1,0,0,\n",
        "                0,1,1,1,1,0,0,0]).reshape(8,8)\n",
        "\n",
        "T= np.array([1,1,1,1,1,1,1,1,\n",
        "               1,1,1,1,1,1,1,1,\n",
        "               0,0,0,1,1,0,0,0,\n",
        "               0,0,0,1,1,0,0,0,\n",
        "               0,0,0,1,1,0,0,0,\n",
        "               0,0,0,1,1,0,0,0,\n",
        "               0,0,0,1,1,0,0,0,\n",
        "               0,0,0,1,1,0,0,0]).reshape(8,8)\n",
        "\n",
        "train = np.array([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T]).reshape(20,64)\n",
        "\n",
        "print(train.shape)\n",
        "\n",
        "fig, axs = plt.subplots(5, 4, figsize=(10, 12))\n",
        "\n",
        "for i, alphabet in enumerate([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T]):\n",
        "    row = i // 4\n",
        "    col = i % 4\n",
        "    axs[row, col].imshow(alphabet, cmap='gray')\n",
        "    axs[row, col].set_title(chr(ord('A') + i))\n",
        "\n",
        "plt.show()\n",
        "\n",
        "class ART1:\n",
        "    def __init__(self, learning_coef=1, vigilance=0.95):\n",
        "        self.learning_coef = learning_coef\n",
        "        self.vigilance = vigilance\n",
        "        self.L1_neurons_cnt = None\n",
        "        self.L2_neurons_cnt = None\n",
        "        self.bottomUps = None\n",
        "        self.topDowns = None\n",
        "        self.class_labels = {}\n",
        "    def predict(self, test):\n",
        "            predictions = []\n",
        "            for tv in test:\n",
        "                outputs = [self.bottomUps[i].dot(tv) for i in range(self.L2_neurons_cnt)]\n",
        "                winner_neuron_idx = np.argmax(outputs)\n",
        "                if self.topDowns[winner_neuron_idx].dot(tv)/(sum(tv)) < self.vigilance:\n",
        "                    # No neuron matches the input vector well enough\n",
        "                    predictions.append('Unknown')\n",
        "                else:\n",
        "                    # Return the label associated with the winning neuron\n",
        "                    predictions.append(chr(ord('A')+winner_neuron_idx))\n",
        "            return predictions    \n",
        "    def fit(self, train, noise_level=0.1):\n",
        "        self.L1_neurons_cnt = len(train[0])\n",
        "        self.L2_neurons_cnt = 1\n",
        "        self.bottomUps = np.array([[1/(self.L1_neurons_cnt + 1) for _ in range(self.L1_neurons_cnt)]], np.float)\n",
        "        self.topDowns = np.array([[1 for _ in range(self.L1_neurons_cnt)]], np.float)\n",
        "\n",
        "        for idx, tv in enumerate(train):\n",
        "            # Add random noise to the input vector\n",
        "            noise = np.random.normal(scale=noise_level, size=self.L1_neurons_cnt)\n",
        "            tv = np.clip(tv + noise, 0, 1)  # Clip values to range [0, 1]\n",
        "            \n",
        "            createNewNeuron = True\n",
        "            outputs = [self.bottomUps[i].dot(tv) for i in range(self.L2_neurons_cnt)]\n",
        "            counter = self.L2_neurons_cnt\n",
        "\n",
        "            while counter > 0:\n",
        "                winning_output = max(outputs)\n",
        "                winner_neuron_idx = outputs.index(winning_output)\n",
        "                tv_sum = sum(tv)\n",
        "\n",
        "                if tv_sum == 0:\n",
        "                    similarity = 0\n",
        "                else:\n",
        "                    similarity = self.topDowns[winner_neuron_idx].dot(tv)/(sum(tv))\n",
        "\n",
        "                if similarity >= self.vigilance:\n",
        "                    createNewNeuron = False\n",
        "                    new_bottom_weights = tv * self.topDowns[winner_neuron_idx]/(self.learning_coef+tv.dot(self.topDowns[winner_neuron_idx]))\n",
        "                    new_top_weights = tv * self.topDowns[winner_neuron_idx]\n",
        "                    self.topDowns[winner_neuron_idx] = new_top_weights\n",
        "                    self.bottomUps[winner_neuron_idx] = new_bottom_weights\n",
        "                    if winner_neuron_idx in self.class_labels:\n",
        "                        self.class_labels[winner_neuron_idx].append(idx)\n",
        "                    else:\n",
        "                        self.class_labels[winner_neuron_idx] = [idx]\n",
        "                    break\n",
        "                else:\n",
        "                    outputs[winner_neuron_idx] = -1\n",
        "                    counter -= 1\n",
        "\n",
        "            if createNewNeuron:\n",
        "                new_bottom_weights = np.array([[i/(self.learning_coef + sum(tv)) for i in tv]], np.float)\n",
        "                new_top_weights = np.array([[i for i in tv]], np.float)\n",
        "                self.bottomUps = np.append(self.bottomUps, new_bottom_weights, axis=0)\n",
        "                self.topDowns = np.append(self.topDowns, new_top_weights, axis=0)\n",
        "                self.L2_neurons_cnt += 1\n",
        "                self.class_labels[self.L2_neurons_cnt-1] = [idx]\n",
        "\n",
        "\n",
        "        print(f\"Total Classes: {self.L2_neurons_cnt}\")\n",
        "        print(\"Class labels:\")\n",
        "        for class_idx, class_items in self.class_labels.items():\n",
        "            print(f\"Class {class_idx}: {[chr(ord('A')+item) for item in class_items]}\")\n",
        "        \n",
        "        # Calculate confusion matrix\n",
        "        predictions = self.predict(train)\n",
        "        true_labels = [chr(ord('A')+i) for i in range(len(train))]\n",
        "        cm = confusion_matrix(true_labels, predictions, labels=[chr(ord('A')+i) for i in range(self.L2_neurons_cnt)])\n",
        "        print(\"Confusion Matrix:\\n\", cm)\n",
        "\n",
        "model = ART1(learning_coef=0.001, vigilance=0.95)\n",
        "\n",
        "start_time = time.time()\n",
        "model.fit(train)\n",
        "end_time = time.time()\n",
        "print(\"Training time:\", time.time() - start_time, \"seconds\")\n",
        "\n",
        "# calculate confusion matrix\n",
        "predictions = model.predict(train)\n",
        "true_labels = [chr(ord('A')+i) for i in range(len(train))]\n",
        "cm = confusion_matrix(true_labels, predictions, labels=[chr(ord('A')+i) for i in range(model.L2_neurons_cnt)])\n",
        "\n",
        "# calculate accuracy\n",
        "accuracy = sum(cm[i][i] for i in range(len(cm))) / len(train)\n",
        "\n",
        "# plot confusion matrix\n",
        "fig, ax = plt.subplots(figsize=(10, 10))\n",
        "im = ax.imshow(cm, cmap='Blues')\n",
        "\n",
        "# set tick labels\n",
        "ax.set_xticks(np.arange(model.L2_neurons_cnt))\n",
        "ax.set_yticks(np.arange(model.L2_neurons_cnt))\n",
        "ax.set_xticklabels([chr(ord('A')+i) for i in range(model.L2_neurons_cnt)])\n",
        "ax.set_yticklabels([chr(ord('A')+i) for i in range(model.L2_neurons_cnt)])\n",
        "plt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\",\n",
        "         rotation_mode=\"anchor\")\n",
        "\n",
        "# add annotations\n",
        "for i in range(model.L2_neurons_cnt):\n",
        "    for j in range(model.L2_neurons_cnt):\n",
        "        text = ax.text(j, i, cm[i, j],\n",
        "                       ha=\"center\", va=\"center\", color=\"white\" if cm[i, j] > cm.max() / 2. else \"black\")\n",
        "\n",
        "# set labels\n",
        "ax.set_title(\"Confusion Matrix\")\n",
        "ax.set_xlabel(\"Predicted label\")\n",
        "ax.set_ylabel(\"True label\")\n",
        "fig.tight_layout()\n",
        "\n",
        "# print accuracy\n",
        "print(\"Accuracy:\", accuracy)\n",
        "\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "Z0h0QHueZE45",
        "outputId": "cdde788d-48a8-4879-c424-b6f76c795a1e"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(20, 64)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 720x864 with 20 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-15-b85c1fdcdc74>:224: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
            "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
            "  self.bottomUps = np.array([[1/(self.L1_neurons_cnt + 1) for _ in range(self.L1_neurons_cnt)]], np.float)\n",
            "<ipython-input-15-b85c1fdcdc74>:225: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
            "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
            "  self.topDowns = np.array([[1 for _ in range(self.L1_neurons_cnt)]], np.float)\n",
            "<ipython-input-15-b85c1fdcdc74>:262: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
            "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
            "  new_bottom_weights = np.array([[i/(self.learning_coef + sum(tv)) for i in tv]], np.float)\n",
            "<ipython-input-15-b85c1fdcdc74>:263: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
            "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
            "  new_top_weights = np.array([[i for i in tv]], np.float)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Total Classes: 7\n",
            "Class labels:\n",
            "Class 0: ['A', 'B', 'C', 'F']\n",
            "Class 1: ['D', 'E', 'G', 'J']\n",
            "Class 2: ['H', 'K', 'L']\n",
            "Class 3: ['I', 'O']\n",
            "Class 4: ['M', 'N', 'P', 'R']\n",
            "Class 5: ['Q', 'S']\n",
            "Class 6: ['T']\n",
            "Confusion Matrix:\n",
            " [[1 0 0 0 0 0 0]\n",
            " [0 0 0 0 0 0 0]\n",
            " [1 0 0 0 0 0 0]\n",
            " [0 1 0 0 0 0 0]\n",
            " [0 1 0 0 0 0 0]\n",
            " [1 0 0 0 0 0 0]\n",
            " [0 1 0 0 0 0 0]]\n",
            "Training time: 0.015209436416625977 seconds\n",
            "Accuracy: 0.05\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 720x720 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAArMAAALICAYAAABsAngZAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAAsTAAALEwEAmpwYAAAtY0lEQVR4nO3dfZjkdXnn+8+NzSAE4xNgQg9seDAgYxCdIT5szKpZlxhUknOpEDlZiNlDTCAe83hFT44ksgkGNlGTMcuiu2cRE2DnSoSM4kDWrEkkCjMgmjjuCgZYpsesCsSNQjLafs8fXYNNB2aasetXfKtfr+uaK13V1VU3d8qe9/z6V9XVWgsAAPRov0kPAAAA+0rMAgDQLTELAEC3xCwAAN0SswAAdEvMAgDQLTEL8ChV1YFVtbmqvlxVm76F+zmzqq5fydkmoao+VFVnTXoOYHUSs8DUqqrXVtW2qvpKVX1+FF3ftwJ3/aokT0vy1Nbaq/f1Tlprv99a+1crMM9DVNWLqqpV1fuXXP+s0fUfWeb9/GpVvW9vt2utvay1dtk+jgvwLRGzwFSqqp9L8o4kv5GF8Dwyye8lOW0F7v6fJflsa+3rK3Bf4/LFJM+vqqcuuu6sJJ9dqQeoBf4eASbKNyFg6lTVE5O8Ncm5rbU/aq19tbX2tdba5tbaL45uc0BVvaOqdo7+vKOqDhh97kVVtaOqfr6qvjA6qvvjo8/9WpK3JDl9dMT3J5Yewayq7xodAZ0ZXT67qv6mqv6+qu6oqjMXXf/RRV/3gqraOjp9YWtVvWDR5z5SVRdU1Q2j+7m+qg7Zwxp2Jbk6yRmjr39cktOT/P6SXb2zqu6uqv9dVTdX1QtH1/9gkjcv+u/85KI5fr2qbkhyf5KjR9f9m9Hn/31V/eGi+//NqvpwVdVy//8H8GiIWWAaPT/J45O8fw+3+X+SPC/JSUmeleR7k/zKos9/R5InJplN8hNJ3lVVT26tnZ+Fo71XtdYObq39xz0NUlXfluR3krystfaEJC9IcuvD3O4pST44uu1Tk/x2kg8uObL62iQ/nuSwJGuS/MKeHjvJe5P869HHpyT56yQ7l9xmaxZ28JQkf5BkU1U9vrW2Zcl/57MWfc2PJTknyROS3LXk/n4+yfeMQv2FWdjdWc3vTgfGRMwC0+ipSb60l9MAzkzy1tbaF1prX0zya1mItN2+Nvr811pr1yb5SpLj9nGebyR5ZlUd2Fr7fGvt0w9zm1OT3NZau7y19vXW2hVJ/nuSVyy6zf/XWvtsa+2BJP8lCxH6iFprf5nkKVV1XBai9r0Pc5v3tdbuGT3mbyU5IHv/7/zPrbVPj77ma0vu7/4s7PG3k7wvyc+01nbs5f4A9pmYBabRPUkO2f1j/kdweB56VPGu0XUP3seSGL4/ycGPdpDW2lez8OP91yf5fFV9sKqOX8Y8u2eaXXT5b/dhnsuTnJfkxXmYI9VV9QtV9ZnRqQ1/l4Wj0Xs6fSFJ7t7TJ1trNyb5mySVhegGGBsxC0yjjyX5xyQ/vIfb7MzCC7l2OzL/9Efwy/XVJActuvwdiz/ZWruutfbSJN+ZhaOt717GPLtnmtvHmXa7PMlPJ7l2dNT0QaPTAH4pyWuSPLm19qQkX85ChCbJI50asMdTBqrq3Cwc4d05un+AsRGzwNRprX05Cy/SeldV/XBVHVRV+1fVy6rqotHNrkjyK1V16OiFVG/Jwo/F98WtSb6/qo4cvfjsTbs/UVVPq6rTRufO/mMWTlf4xsPcx7VJvnv0dmIzVXV6khOSfGAfZ0qStNbuSPIvsnCO8FJPSPL1LLzzwUxVvSXJty/6/P9K8l2P5h0Lquq7k/zbJP9nFk43+KWqOmnfpgfYOzELTKXR+Z8/l4UXdX0xCz8aPy8Lr/BPFoJrW5JPJfmrJLeMrtuXx/qTJFeN7uvmPDRA9xvNsTPJvVkIy596mPu4J8nLs/ACqnuycETz5a21L+3LTEvu+6OttYc76nxdki1ZeLuuu5L8Qx56CsHuXwhxT1XdsrfHGZ3W8b4kv9la+2Rr7bYsvCPC5bvfKQJgpZUXmAIA0CtHZgEA6JaYBQCgW2IWAIBuiVkAALq1pzcUn4iaObDVmidMeoxV5dnPOHLSIwAA7NEtt9z8pdbaoUuvf+zF7Jon5IDjXjPpMVaVG27cOOkRAAD26MD9a+lvSUziNAMAADomZgEA6JaYBQCgW2IWAIBuiVkAALolZgEA6JaYBQCgW2IWAIBuiVkAALolZgEA6JaYBQCgW2IWAIBuiVkAALolZgEA6JaYBQCgW2IWAIBuiVkAALolZgEA6JaYBQCgW2IWAIBuiVkAALolZgEA6JaYBQCgW2IWAIBuiVkAALolZgEA6JaYBQCgW2IWAIBuiVkAALolZgEA6JaYBQCgW2IWAIBuiVkAALolZgEA6JaYBQCgW2IWAIBuiVkAALolZgEA6JaYBQCgW2IWAIBuiVkAALolZr9Fl5x/Zu768IXZtunNkx5l1bj+ui05cd1xWXf8sbn4ordNepxVwc6HZ+fDs/Nh2ffwpnXnY4/ZqvrhqmpVdfy4H2sSLt/88Zx27rsmPcaqMT8/nze+4dxcs/lD+cSntmfTlVfkM9u3T3qsqWbnw7Pz4dn5sOx7eNO88yGOzP5oko+O/u/UueGWz+XeL98/6TFWja033ZRjjjk2Rx19dNasWZNXn35GPrD5mkmPNdXsfHh2Pjw7H5Z9D2+adz7WmK2qg5N8X5KfSHLGOB+L1WHnzrmsXXvEg5dnZ9dmbm5ughNNPzsfnp0Pz86HZd/Dm+adj/vI7GlJtrTWPpvknqpa/3A3qqpzqmpbVW1rX39gzCMBADAtxh2zP5rkytHHV+YRTjVorV3aWtvQWttQMweOeSR6dvjhs9mx4+4HL8/N7cjs7OwEJ5p+dj48Ox+enQ/Lvoc3zTsfW8xW1VOSvCTJe6rqziS/mOQ1VVXjekym34aTT87tt9+WO++4I7t27cqmq67MqS9/5aTHmmp2Pjw7H56dD8u+hzfNO58Z432/KsnlrbWf3H1FVf1Zkhcm+fMxPu6gLrvw7Lxw/dNzyJMOzu1bLsgFl1yby67+2KTHmlozMzN5+zs35hWnnpL5+fmcdfbrcsK6dZMea6rZ+fDsfHh2Piz7Ht4077xaa+O546r/luQ3W2tbFl33hiTPaK391CN93X4HHdYOOO41Y5mJh3ff1o2THgEAYI8O3L9ubq1tWHr92I7MttZe/DDX/c64Hg8AgNXHbwADAKBbYhYAgG6JWQAAuiVmAQDolpgFAKBbYhYAgG6JWQAAuiVmAQDolpgFAKBbYhYAgG6JWQAAuiVmAQDolpgFAKBbYhYAgG6JWQAAuiVmAQDolpgFAKBbYhYAgG6JWQAAuiVmAQDolpgFAKBbYhYAgG6JWQAAuiVmAQDolpgFAKBbYhYAgG6JWQAAuiVmAQDolpgFAKBbYhYAgG6JWQAAuiVmAQDolpgFAKBbYhYAgG6JWQAAuiVmAQDolpgFAKBbYhYAgG6JWQAAuiVmAQDo1sykB1jq2c84MjfcuHHSYwAA0AFHZgEA6JaYBQCgW2IWAIBuiVkAALolZgEA6JaYBQCgW2IWAIBuiVkAALolZgEA6JaYBQCgW2IWAIBuiVkAALolZgEA6JaYBQCgW2IWAIBuiVkAALolZgEA6JaYBQCgW2IWAIBuiVkAALolZgEA6JaYBQCgW2IWAIBuiVkAALolZgEA6JaYBQCgW2IWAIBuiVkAALolZgEA6JaYBQCgW2IWAIBuiVkAALolZgEA6JaYBQCgW2IWAIBuiVkAALolZgEA6JaYBQCgW2IWAIBuiVkAALolZgEA6JaYXQHXX7clJ647LuuOPzYXX/S2SY8z9ex7eHY+PDsfnp0Py76HN607r9ba+O68aj7JXyWpJPNJzmut/eWevmb9+g3thhu3jW2mlTY/P5/vOeG788EP/Ulm167N9z3v5Fz2vivyjBNOmPRoU8m+h2fnw7Pz4dn5sOx7eNOw8wP3r5tbaxuWXj/uI7MPtNZOaq09K8mbklw45scb3Nabbsoxxxybo44+OmvWrMmrTz8jH9h8zaTHmlr2PTw7H56dD8/Oh2Xfw5vmnQ95msG3J7lvwMcbxM6dc1m79ogHL8/Ors3c3NwEJ5pu9j08Ox+enQ/Pzodl38Ob5p3PjPn+D6yqW5M8Psl3JnnJw92oqs5Jck6SHHHkkWMeCQCAaTHUaQbHJ/nBJO+tqlp6o9bapa21Da21DYcecuiYR1pZhx8+mx077n7w8tzcjszOzk5woulm38Oz8+HZ+fDsfFj2Pbxp3vlgpxm01j6W5JAkfdXqXmw4+eTcfvttufOOO7Jr165suurKnPryV056rKll38Oz8+HZ+fDsfFj2Pbxp3vm4TzN4UFUdn+RxSe4Z6jGHMDMzk7e/c2NeceopmZ+fz1lnvy4nrFs36bGmln0Pz86HZ+fDs/Nh2ffwpnnnQ701V7Lw9lxvbq19cE9f09tbcwEAMH6P9NZcYz0y21p73DjvHwCA1c1vAAMAoFtiFgCAbolZAAC6JWYBAOiWmAUAoFtiFgCAbolZAAC6JWYBAOiWmAUAoFtiFgCAbolZAAC6JWYBAOiWmAUAoFtiFgCAbolZAAC6JWYBAOiWmAUAoFtiFgCAbolZAAC6JWYBAOiWmAUAoFtiFgCAbolZAAC6JWYBAOiWmAUAoFtiFgCAbolZAAC6JWYBAOiWmAUAoFtiFgCAbolZAAC6JWYBAOiWmAUAoFtiFgCAbolZAAC6JWYBAOiWmAUAoFtiFgCAbolZAAC6JWYBAOhWtdYmPcND7HfQYe2A414z6TFWlfu2bpz0CAAAe3Tg/nVza23D0usdmQUAoFtiFgCAbolZAAC6JWYBAOiWmAUAoFtiFgCAbolZAAC6JWYBAOiWmAUAoFtiFgCAbolZAAC6JWYBAOiWmAUAoFtiFgCAbolZAAC6JWYBAOiWmAUAoFtiFgCAbolZAAC6JWYBAOiWmAUAoFtiFgCAbolZAAC6JWYBAOiWmAUAoFtiFgCAbolZAAC6JWYBAOiWmAUAoFtiFgCAbolZAAC6JWYBAOiWmAUAoFtiFgCAbolZAAC6JWYBAOiWmAUAoFtiFgCAbolZAAC6JWYBAOiWmAUAoFtiFgCAbonZb9El55+Zuz58YbZtevOkR1k1rr9uS05cd1zWHX9sLr7obZMeZ1Ww8+HZ+fDsfFj2Pbxp3fnYY7aqvqOqrqyqz1XVzVV1bVV997gfdyiXb/54Tjv3XZMeY9WYn5/PG99wbq7Z/KF84lPbs+nKK/KZ7dsnPdZUs/Ph2fnw7HxY9j28ad75WGO2qirJ+5N8pLV2TGttfZI3JXnaOB93SDfc8rnc++X7Jz3GqrH1pptyzDHH5qijj86aNWvy6tPPyAc2XzPpsaaanQ/Pzodn58Oy7+FN887HfWT2xUm+1lq7ZPcVrbVPttb+YsyPy5TauXMua9ce8eDl2dm1mZubm+BE08/Oh2fnw7PzYdn38KZ55zNjvv9nJrl5bzeqqnOSnJMk2f/gMY8EAMC0eEy8AKy1dmlrbUNrbUPNHDjpcXgMO/zw2ezYcfeDl+fmdmR2dnaCE00/Ox+enQ/Pzodl38Ob5p2PO2Y/nWT9mB+DVWTDySfn9ttvy5133JFdu3Zl01VX5tSXv3LSY001Ox+enQ/Pzodl38Ob5p2P+zSDP03yG1V1Tmvt0iSpqhOTPHFazpu97MKz88L1T88hTzo4t2+5IBdccm0uu/pjkx5ras3MzOTt79yYV5x6Subn53PW2a/LCevWTXqsqWbnw7Pz4dn5sOx7eNO882qtjfcBqg5P8o4sHKH9hyR3Jnlja+22h7v9fgcd1g447jVjnYmHum/rxkmPAACwRwfuXze31jYsvX7cR2bTWtuZRJ0CALDiHhMvAAMAgH0hZgEA6JaYBQCgW2IWAIBuiVkAALolZgEA6JaYBQCgW2IWAIBuiVkAALolZgEA6JaYBQCgW2IWAIBuiVkAALolZgEA6JaYBQCgW2IWAIBuiVkAALolZgEA6JaYBQCgW2IWAIBuiVkAALolZgEA6JaYBQCgW2IWAIBuiVkAALolZgEA6JaYBQCgW2IWAIBuiVkAALolZgEA6JaYBQCgW2IWAIBuiVkAALolZgEA6JaYBQCgW2IWAIBuiVkAALolZgEA6JaYBQCgW2IWAIBuzUx6gKWe/Ywjc8ONGyc9xqry5JPPm/QIq8p9Wz2/AWClODILAEC3xCwAAN0SswAAdEvMAgDQLTELAEC3xCwAAN0SswAAdEvMAgDQLTELAEC3xCwAAN0SswAAdEvMAgDQLTELAEC3xCwAAN0SswAAdEvMAgDQLTELAEC3xCwAAN0SswAAdEvMAgDQLTELAEC3xCwAAN0SswAAdEvMAgDQrZlH+kRV/W6S9kifb629YSwTAQDAMj1izCbZNtgUAACwDx4xZltrly2+XFUHtdbuH/9IAACwPHs9Z7aqnl9V25P899HlZ1XV7419MgAA2IvlvADsHUlOSXJPkrTWPpnk+8c4EwAALMuy3s2gtXb3kqvmxzALAAA8Knt6Adhud1fVC5K0qto/yf+d5DPjHQsAAPZuOUdmX5/k3CSzSXYmOWl0GQAAJmqvR2Zba19KcuYAswAAwKOynHczOLqqNlfVF6vqC1V1TVUdPcRwAACwJ8s5zeAPkvyXJN+Z5PAkm5JcMc6hAABgOZYTswe11i5vrX199Od9SR4/7sEAAGBvHvGc2ap6yujDD1XVLye5MklLcnqSaweYDQAA9mhPLwC7OQvxWqPLP7nocy3Jm8Y1FAAALMcjxmxr7aghBwEAgEdrOb80IVX1zCQnZNG5sq21945rKAAAWI69xmxVnZ/kRVmI2WuTvCzJR5OIWQAAJmo572bwqiQ/kORvW2s/nuRZSZ441qkAAGAZlhOzD7TWvpHk61X17Um+kOSI8Y7Vl+uv25IT1x2Xdccfm4svetukx5l6l5x/Zu768IXZtunNkx5l1fAcH56dD8/Oh2Xfw5vWnS8nZrdV1ZOSvDsL73BwS5KP7e2Lqmq+qm6tqk9X1Ser6uerajmP15X5+fm88Q3n5prNH8onPrU9m668Ip/Zvn3SY021yzd/PKed+65Jj7FqeI4Pz86HZ+fDsu/hTfPO9xqXrbWfbq39XWvtkiQvTXLW6HSDvXmgtXZSa23d6OteluT8b23cx56tN92UY445NkcdfXTWrFmTV59+Rj6w+ZpJjzXVbrjlc7n3y/dPeoxVw3N8eHY+PDsfln0Pb5p3/ogxW1XPWfonyVOSzIw+XrbW2heSnJPkvKqqvd2+Jzt3zmXt2m+edTE7uzZzc3MTnAhWluf48Ox8eHY+LPse3jTvfE/vZvBbe/hcS/KSR/NArbW/qarHJTksyf9a/LmqOicLsZsjjjzy0dwtAACr2J5+acKLhxqitXZpkkuTZP36DW2ox10Jhx8+mx077n7w8tzcjszOzk5wIlhZnuPDs/Ph2fmw7Ht407zzwV6QVVVHJ5nPwrshTI0NJ5+c22+/LXfecUd27dqVTVddmVNf/spJjwUrxnN8eHY+PDsfln0Pb5p3vqzfAPatqqpDk1ySZGNrrasjr3szMzOTt79zY15x6imZn5/PWWe/LiesWzfpsabaZReenReuf3oOedLBuX3LBbngkmtz2dV7fYMN9pHn+PDsfHh2Piz7Ht4077zG1ZZVNZ/kr5Lsn+TrSS5P8tuj96x9ROvXb2g33LhtLDPx8J588nmTHmFVuW/rxkmPAADdOXD/urm1tmHp9cv5dbaV5MwkR7fW3lpVRyb5jtbaTXv6utba4/Z5WgAAWIblnDP7e0men+RHR5f/Pol3rAcAYOKWc87sc1trz6mqTyRJa+2+qloz5rkAAGCvlnNk9muj94dtyYMv5trjea8AADCE5cTs7yR5f5LDqurXk3w0yW+MdSoAAFiGvZ5m0Fr7/aq6OckPJKkkP9xa+8zYJwMAgL1YzrsZHJnk/iSbF1/XWvuf4xwMAAD2ZjkvAPtgFs6XrSSPT3JUkv+RZDreaRcAgG4t5zSD71l8uaqek+SnxzYRAAAs03JeAPYQrbVbkjx3DLMAAMCjspxzZn9u0cX9kjwnyc6xTQQAAMu0nHNmn7Do469n4RzaPxzPOAAAsHx7jNnRL0t4QmvtFwaaBwAAlu0Rz5mtqpnW2nySfz7gPAAAsGx7OjJ7UxbOj721qv44yaYkX939ydbaH415NgAA2KPlnDP7+CT3JHlJvvl+sy2JmAUAYKL2FLOHjd7J4K/zzYjdrY11KgAAWIY9xezjkhych0bsbmIWAICJ21PMfr619tbBJgEAgEdpT78B7OGOyAIAwGPGnmL2BwabAgAA9sEjxmxr7d4hBwEAgEdrT0dmAQDgMU3MAgDQLTELAEC3xCwAAN0SswAAdEvMAgDQLTELAEC3xCwAAN0SswAAdEvMAgDQLTELAEC3xCwAAN0SswAAdEvMAgDQLTELAEC3xCwAAN0SswAAdEvMAgDQLTELAEC3xCwAAN0SswAAdEvMAgDQLTELAEC3xCwAAN0SswAAdEvMAgDQLTELAEC3xCwAAN0SswAAdEvMAgDQLTELAEC3xCwAAN0SswAAdEvMAgDQLTELAEC3xCwAAN0SswAAdEvMAgDQLTELAEC3xCwAAN0SswAAdEvMAgDQLTELAEC3xCwAAN0SswAAdEvMAgDQLTELAEC3xCwAAN0SswAAdEvMAgDQLTELAEC3xCwAAN0SswAAdEvMAgDQLTELAEC3xCwAAN0SswAAdEvMAgDQLTELAEC3xCwAAN0SswAAdEvMroDrr9uSE9cdl3XHH5uLL3rbpMeZepecf2bu+vCF2bbpzZMeZdXwHB+enQ/Pzodl38Ob1p2PPWarar6qbl3055fH/ZhDmp+fzxvfcG6u2fyhfOJT27Ppyivyme3bJz3WVLt888dz2rnvmvQYq4bn+PDsfHh2Piz7Ht4073yII7MPtNZOWvRnev4pkGTrTTflmGOOzVFHH501a9bk1aefkQ9svmbSY021G275XO798v2THmPV8Bwfnp0Pz86HZd/Dm+adO83gW7Rz51zWrj3iwcuzs2szNzc3wYlgZXmOD8/Oh2fnw7Lv4U3zzoeI2QOXnGZw+gCPCQDAKjAzwGM80Fo7aU83qKpzkpyTJEcceeQAI62cww+fzY4ddz94eW5uR2ZnZyc4Eawsz/Hh2fnw7HxY9j28ad75Y+I0g9bapa21Da21DYcecuikx3lUNpx8cm6//bbceccd2bVrVzZddWVOffkrJz0WrBjP8eHZ+fDsfFj2Pbxp3vkQR2an2szMTN7+zo15xamnZH5+Pmed/bqcsG7dpMeaapddeHZeuP7pOeRJB+f2LRfkgkuuzWVXf2zSY00tz/Hh2fnw7HxY9j28ad55tdbG+wBV80n+atFVW1prj/j2XOvXb2g33LhtrDPxUE8++bxJj7Cq3Ld146RHAIDuHLh/3dxa27D0+rEfmW2tPW7cjwEAwOr0mDhnFgAA9oWYBQCgW2IWAIBuiVkAALolZgEA6JaYBQCgW2IWAIBuiVkAALolZgEA6JaYBQCgW2IWAIBuiVkAALolZgEA6JaYBQCgW2IWAIBuiVkAALolZgEA6JaYBQCgW2IWAIBuiVkAALolZgEA6JaYBQCgW2IWAIBuiVkAALolZgEA6JaYBQCgW2IWAIBuiVkAALolZgEA6JaYBQCgW2IWAIBuiVkAALolZgEA6JaYBQCgW2IWAIBuiVkAALolZgEA6JaYBQCgW2IWAIBuiVkAALpVrbVJz/AQ+x10WDvguNdMeoxV5b6tGyc9AgDAHh24f93cWtuw9HpHZgEA6JaYBQCgW2IWAIBuiVkAALolZgEA6JaYBQCgW2IWAIBuiVkAALolZgEA6JaYBQCgW2IWAIBuiVkAALolZgEA6JaYBQCgW2IWAIBuiVkAALolZgEA6JaYBQCgW2IWAIBuiVkAALolZgEA6JaYBQCgW2IWAIBuiVkAALolZgEA6JaYBQCgW2IWAIBuiVkAALolZgEA6JaYBQCgW2IWAIBuiVkAALolZgEA6JaYBQCgW2IWAIBuiVkAALolZgEA6JaYBQCgW2IWAIBuiVkAALolZgEA6JaYBQCgW2L2W3TJ+Wfmrg9fmG2b3jzpUVaN66/bkhPXHZd1xx+biy9626THWRXsfHh2Pjw7H5Z9D29adz72mK2q+aq6ddGf7xr3Yw7p8s0fz2nnvmvSY6wa8/PzeeMbzs01mz+UT3xqezZdeUU+s337pMeaanY+PDsfnp0Py76HN807H+LI7AOttZMW/blzgMcczA23fC73fvn+SY+xamy96aYcc8yxOeroo7NmzZq8+vQz8oHN10x6rKlm58Oz8+HZ+bDse3jTvHOnGdCVnTvnsnbtEQ9enp1dm7m5uQlONP3sfHh2Pjw7H5Z9D2+adz4zwGMcWFW3jj6+o7X2I0tvUFXnJDknSbL/wQOMBADANBgiZh9orZ20pxu01i5NcmmS7HfQYW2AmejU4YfPZseOux+8PDe3I7OzsxOcaPrZ+fDsfHh2Piz7Ht4079xpBnRlw8kn5/bbb8udd9yRXbt2ZdNVV+bUl79y0mNNNTsfnp0Pz86HZd/Dm+adD3FkdqpdduHZeeH6p+eQJx2c27dckAsuuTaXXf2xSY81tWZmZvL2d27MK049JfPz8znr7NflhHXrJj3WVLPz4dn58Ox8WPY9vGneebU23p/qV9VXWmvLPhF2v4MOawcc95pxjsQS923dOOkRAAD26MD96+bW2oal14/9NINHE7IAAPBoOGcWAIBuiVkAALolZgEA6JaYBQCgW2IWAIBuiVkAALolZgEA6JaYBQCgW2IWAIBuiVkAALolZgEA6JaYBQCgW2IWAIBuiVkAALolZgEA6JaYBQCgW2IWAIBuiVkAALolZgEA6JaYBQCgW2IWAIBuiVkAALolZgEA6JaYBQCgW2IWAIBuiVkAALolZgEA6JaYBQCgW2IWAIBuiVkAALolZgEA6JaYBQCgW2IWAIBuiVkAALolZgEA6JaYBQCgW2IWAIBuiVkAALolZgEA6JaYBQCgWzOTHmCpZz/jyNxw48ZJj7GqPPnk8yY9wqpy31bPbwBYKY7MAgDQLTELAEC3xCwAAN0SswAAdEvMAgDQLTELAEC3xCwAAN0SswAAdEvMAgDQLTELAEC3xCwAAN0SswAAdEvMAgDQLTELAEC3xCwAAN0SswAAdEvMAgDQLTELAEC3xCwAAN0SswAAdEvMAgDQLTELAEC3xCwAAN0SswAAdEvMAgDQLTELAEC3xCwAAN0SswAAdEvMAgDQLTELAEC3xCwAAN0SswAAdEvMAgDQLTELAEC3xCwAAN0SswAAdEvMAgDQLTELAEC3xCwAAN0SswAAdEvMAgDQLTELAEC3xOwKuP66LTlx3XFZd/yxufiit016nKl3yfln5q4PX5htm9486VFWDc/x4dn58Ox8WPY9vGnd+VhjtqqeVlV/UFV/U1U3V9XHqupHxvmYQ5ufn88b33Burtn8oXziU9uz6cor8pnt2yc91lS7fPPHc9q575r0GKuG5/jw7Hx4dj4s+x7eNO98bDFbVZXk6iR/3lo7urW2PskZSdaO6zEnYetNN+WYY47NUUcfnTVr1uTVp5+RD2y+ZtJjTbUbbvlc7v3y/ZMeY9XwHB+enQ/Pzodl38Ob5p2P88jsS5Lsaq1dsvuK1tpdrbXfHeNjDm7nzrmsXXvEg5dnZ9dmbm5ughPByvIcH56dD8/Oh2Xfw5vmnY8zZtcluWU5N6yqc6pqW1Vt++KXvjjGkQAAmCaDvQCsqt5VVZ+sqq1LP9dau7S1tqG1tuHQQw4daqQVcfjhs9mx4+4HL8/N7cjs7OwEJ4KV5Tk+PDsfnp0Py76HN807H2fMfjrJc3ZfaK2dm+QHkvRVq3ux4eSTc/vtt+XOO+7Irl27sumqK3Pqy1856bFgxXiOD8/Oh2fnw7Lv4U3zzmfGeN9/muQ3quqnWmv/fnTdQWN8vImYmZnJ29+5Ma849ZTMz8/nrLNflxPWrZv0WFPtsgvPzgvXPz2HPOng3L7lglxwybW57OqPTXqsqeU5Pjw7H56dD8u+hzfNO6/W2vjuvOo7k7w9yXOTfDHJV5Nc0lq76pG+Zv36De2GG7eNbSb+qSeffN6kR1hV7tu6cdIjAEB3Dty/bm6tbVh6/TiPzKa19vksvB0XAACsOL8BDACAbolZAAC6JWYBAOiWmAUAoFtiFgCAbolZAAC6JWYBAOiWmAUAoFtiFgCAbolZAAC6JWYBAOiWmAUAoFtiFgCAbolZAAC6JWYBAOiWmAUAoFtiFgCAbolZAAC6JWYBAOiWmAUAoFtiFgCAbolZAAC6JWYBAOiWmAUAoFtiFgCAbolZAAC6JWYBAOiWmAUAoFtiFgCAbolZAAC6JWYBAOiWmAUAoFtiFgCAbolZAAC6JWYBAOiWmAUAoFtiFgCAbolZAAC6JWYBAOiWmAUAoFvVWpv0DA9RVV9Mctek59gHhyT50qSHWGXsfHh2Piz7Hp6dD8/Oh9Xzvv9Za+3QpVc+5mK2V1W1rbW2YdJzrCZ2Pjw7H5Z9D8/Oh2fnw5rGfTvNAACAbolZAAC6JWZXzqWTHmAVsvPh2fmw7Ht4dj48Ox/W1O3bObMAAHTLkVkAALolZgEA6JaYBQBYBapqKrtvKv+jgJVVVeur6nur6sBJz7IaTetfQI8lo+f48yY9x2pSVd8x6RlWk6r6viRnV9WzJz3LSvMN8ltQVU9bctk+B1BVT62qJ096jtWiqn4wySVJjk8yO+FxVoWqenpVPa+qXlJVT26tfaOqatJzTauqelkWXuF9/6RnWS2q6tQkf1xV/+S3ObHyRt/HfzfJ15M8ccLjrLiZSQ/Qq6o6Psn2qnpnku2ttXe31r4x+tx+uz9mZVXVDyX51SR3VtVnW2u/MuGRplpV/YssfAN8bWtt66TnWQ1Gf8lfkIVf631wkuOr6pWttU9UVTVvQbOiRn/J/0qSN7XWPjX6h/KTWmt3THi0qTXa+S8neUtr7YtVtX9r7WuTnmtajb6Pb0xyZmvtxkXXr2utfXpyk60cRxL33VeS/GWSv03y6qp6b1W9sqq+XciOx+gb4JuT/HqS30hypB97j936JBtba1uraiZJHCEcn9Fz/P9N8rOttR9prb00ybuzcATrWa215idAK6eqnpLk2iQXt9aur6pjkvxxkiMnO9n0WrTz32qtbRnt/D1V9RTfW8bm2Ul+d0nIXpzkz6rqvMmNtXJ8U9xHrbUdSW5K8pwkP5SF/3G+LskHR+cWPn2S802bJd8Ar0myJslLk/y7qvoPi27nm+EKWLTHo5Ls/jHgfJLsPjJYVc+sqsdPYLyptOg5/m9ba3+2e7ettbcmeU+S91fVE/1jeeW01u5N8ookb6mqE7NwOs3VrbU/m+xk0+thdn5pkk+01u71U4eVtej7+DH55vfx3afVHJrklUl+sapOm8B4K0rM7oNFT5BfTtKSHJKFI7QnJvl0Fo4e/lxVfdtkJpw+S74BPisLR2cvTfK2JM+qqitGt/PNcAUs2uP7kzyvqtbvPiq46MjgS5IcN5kJp8+i5/iFVfXU1to/VNUBo8/9WpI7k/hH8gprrX0wC9+zb03y4dbab1XV45KFI+VV9eJJzjeNluz8T1pr7xh9b3EwYgUt+j5+dZLnVtVzRpf/a5JzWmt/mYWf/Bw0gfFWlJjdB6O/1Hf/j+62JL+VhX/R/1xr7fVJfjHJm1trX53UjNNo9A3wTUk+kYW/dM5vrd2d5F8mObSqnjrRAafTjUk+muT0UdB+Y/RipDOS/FiS+yY73nQZPcd/KclNoxd+/WNV7T/69N8n+YfJTTe9WmtbkpyShVd6P6m1Nl9VZyd5axb+EcEKW7Lz3T9xeNyEx5pWH09yQ5Izqup7W2tfa63tqqofTfKyLHyf75pfZ/stqqrjkvxZkne11i6Y9DyrQVW9NAsnsz+3tfZ3VfXjSf6vJKe01v5+stNNn6qaTfITSX4gybYkDyR5VZJXtdb+epKzTavRjwE3JtnQWruvqv51knOTvKK19oXJTje9Rnu/KMnvJXltktdPywtkHqtGO39HkuePfjrBGCz6Pv6SLBwQ2v19/Idba9snOdtKELMrYPQv+O9KclFrzVu7DGD0DfDiLPylc0aSnxZW4zN6od36LBwF/3yS/9Za++xkp5puS8Lqx7LwY0HP8TGrqpcn+aMkzxaywxids3l+kg1Z+OGnMBmD0ffx52Th9SZzST7SWrttslOtDDG7AkZv03VRkjPE7HD8pcO08xyfjKo6yPfyYVXVwa21r0x6DvokZleIb36TYe9MO89xgD0TswAAdMu7GQAA0C0xCwBAt8QsAADdErMAAHRLzAKMVNV8Vd1aVX9dVZuqap9/zWNV/eeqetXo4/dU1Ql7uO2LquoF+/AYd1bVIcu9fsltHtXbIFXVr1bVLzzaGQHGTcwCfNMDrbWTWmvPTLIryesXf7KqZvblTltr/2Yvv2XnRUkedcwCIGYBHslfJDl2dNT0L6rqj5Nsr6rHVdXFVbW1qj5VVT+ZJLVgY1X9j6r6r0kO231HVfWRqtow+vgHq+qWqvpkVX24qr4rC9H8s6Ojwi+sqkOr6g9Hj7G1qv756GufWlXXV9Wnq+o9SWpv/xFVdXVV3Tz6mnOWfO7to+s/XFWHjq47pqq2jL7mL0a/FAbgMWufjjIATLPREdiXJdkyuuo5SZ7ZWrtjFIRfbq2dXFUHJLmhqq5P8uwkxyU5IcnTkmxP8p+W3O+hSd6d5PtH9/WU1tq9VXVJkq+01v7d6HZ/kOTtrbWPVtWRSa5L8ows/MrPj7bW3lpVp2bhd63vzetGj3Fgkq1V9YettXuSfFuSba21n62qt4zu+7wklyZ5fWvttqp6bhZ+ne5L9mGNAIMQswDfdGBV3Tr6+C+S/Mcs/Pj/ptbaHaPr/1WSE3efD5vkiUmenuT7k1zRWptPsrOq/vRh7v95Sf5893211u59hDn+ZZITqh488PrtVXXw6DH+j9HXfrCq7lvGf9MbqupHRh8fMZr1niTfSHLV6Pr3Jfmj0WO8IMmmRY99wDIeA2BixCzANz3QWjtp8RWjqPvq4quS/Exr7bolt/uhFZxjvyTPa639w8PMsmxV9aIshPHzW2v3V9VHkjz+EW7eRo/7d0t3APBY5pxZgEfnuiQ/VVX7J0lVfXdVfVuSP09y+uic2u9M8uKH+dqPJ/n+qjpq9LVPGV3/90mesOh21yf5md0Xquqk0Yd/nuS1o+teluTJe5n1iUnuG4Xs8Vk4Mrzbfkl2H11+bRZOX/jfSe6oqlePHqOq6ll7eQyAiRKzAI/Oe7JwPuwtVfXXSf5DFn7K9f4kt40+994kH1v6ha21LyY5Jws/0v9kvvlj/s1JfmT3C8CSvCHJhtELzLbnm++q8GtZiOFPZ+F0g/+5l1m3JJmpqs8keVsWYnq3ryb53tF/w0uSvHV0/ZlJfmI036eTnLaMnQBMTLXWJj0DAADsE0dmAQDolpgFAKBbYhYAgG6JWQAAuiVmAQDolpgFAKBbYhYAgG79/1t/78cpyM51AAAAAElFTkSuQmCC\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    }
  ]
}